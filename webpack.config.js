const webpack = require('webpack');const path = require('path');const HtmlWebpackHarddiskPlugin = require('html-webpack-harddisk-plugin');const ExtractTextPlugin = require('extract-text-webpack-plugin');const CleanWebpackPlugin = require('clean-webpack-plugin');const CopyWebpackPlugin = require('copy-webpack-plugin');const HtmlWebpackPlugin = require('html-webpack-plugin');const resolve = path.resolve;const cssName = process.env.NODE_ENV === 'production' ? 'styles-[hash].css' : 'styles.css';const jsName = (process.env.NODE_ENV === 'production') ? 'bundle-[hash].js' : 'bundle.js';const plugins = [  new webpack.HotModuleReplacementPlugin(), // enable HMR globally  new webpack.NamedModulesPlugin(), // prints more readable module names in the browser console on HMR updates,  new webpack.LoaderOptionsPlugin({    options: {      eslint: { configFile: '.eslintrc' },    },  }),  new webpack.DefinePlugin({    'process.env': {      BROWSER: JSON.stringify(true),      NODE_ENV: JSON.stringify(process.env.NODE_ENV || 'development'),    },  }),  new ExtractTextPlugin({    filename: `[name]-${cssName}`,    disable: process.env.NODE_ENV === 'development',  }),  new webpack.LoaderOptionsPlugin({    debug: process.env.NODE_ENV !== 'production',  }),  // new FaviconsWebpackPlugin(path.resolve(__dirname, 'src/cms/img/gear.png')),  new HtmlWebpackPlugin({    title: 'MicroSite',    filename: 'index.html',    template: 'src/index.ejs',    alwaysWriteToDisk: true,  }),  new HtmlWebpackHarddiskPlugin(),];if (process.env.NODE_ENV === 'production') {  plugins.push(new CleanWebpackPlugin(['public/assets'], {    root: __dirname,    verbose: true,    dry: false,  }));  plugins.push(new webpack.optimize.OccurrenceOrderPlugin());}module.exports = {  resolve: {    extensions: ['.webpack.js', '.web.js', '.js', '.jsx'],  },  entry: {    index: ['babel-polyfill', './src/js/index.js'],  },  output: {    filename: `[name]-${jsName}`, // the output bundle    path: resolve(__dirname, './public/assets'),    publicPath: (process.env.NODE_ENV !== 'production') ? 'http://localhost:8080' : '/',    // necessary for HMR to know where to load the hot update chunks  },  devtool: 'inline-source-map',  devServer: {    hot: true, // enable HMR on the server    contentBase: __dirname, // match the output path    publicPath: '/', // match the output `publicPath`,    watchOptions: {      aggregateTimeout: 300,      poll: 100,    },  },  module: {    rules: [      {        test: /\.(js|jsx)$/,        use: ['babel-loader'],        exclude: /node_modules/,      },      {        test: /[^modules]\.scss$/,        use: ExtractTextPlugin.extract({          fallback: 'style-loader',          use: [            { loader: 'css-loader', query: { modules: false, sourceMaps: true } },            { loader: 'postcss-loader' },            { loader: 'sass-loader', query: { sourceMaps: true } },          ],        }),      },      {        test: /modules\.scss$/,        use: ExtractTextPlugin.extract({          fallback: 'style-loader',          use: [            { loader: 'css-loader', query: { modules: true, sourceMaps: true } },            { loader: 'postcss-loader' },            { loader: 'sass-loader', query: { modules: true, sourceMaps: true } },          ],        }),      },      {        test: /modules\.css$/,        use: ExtractTextPlugin.extract({          fallback: 'style-loader',          use: [            { loader: 'css-loader', query: { modules: true, sourceMaps: true } },          ],        }),      },      {        test: /[^modules]\.css$/,        use: ExtractTextPlugin.extract({          fallback: 'style-loader',          use: [            { loader: 'css-loader', query: { modules: false, sourceMaps: true } },          ],        }),      },      {        test: /\.(jpe?g|png|gif|svg)$/i,        loaders: [          'file-loader?hash=sha512&digest=hex&name=[hash].[ext]',          'image-webpack-loader?bypassOnDebug&optipng.optimizationLevel=7&gifsicle.interlaced=false',        ],      },    ],  },  plugins,  performance: {    hints: false,  },};